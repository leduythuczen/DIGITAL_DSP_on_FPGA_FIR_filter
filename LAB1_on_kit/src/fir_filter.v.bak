`timescale 1ns / 1ps

module fir_filter(
    input clk,
    input reset,
    input signed [23:0] fir_input, //input 
    input fir_ready,
    output reg signed [31:0] fir_output //output
    );
// khai báo các biến 

    
    // 8-tap FIR 
    reg enable_fir, enable_buff;
    reg [3:0] buff_cnt;
    reg signed [23:0] in_sample; 
    reg signed [23:0] buff0, buff1, buff2, buff3, buff4, buff5, buff6, buff7, buff8, buff9,buff10,buff11, buff12,buff13,
    buff14, buff15; 
    wire signed [7:0] tap0, tap1, tap2, tap3, tap4, tap5, tap6, tap7, tap8, tap9, tap10, tap11, tap12, tap13,
    tap14,tap15; 
    reg signed [31:0] acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7,acc8,acc9,acc10,acc11,acc12,acc13,acc14,acc15; 

    
    /* Taps for LPF running @ 1MSps with a cutoff freq of 400kHz  cái này lấy từ matalb 8tab */    
    assign tap0 = 8'h00;  // twos(-0.0265 * 32768) = 0xFC9C
    assign tap1 = 8'hFF;  // 0
    assign tap2 = 8'hFF;  // 0.0441 * 32768 = 1445.0688 = 1445 = 0x05A5
    assign tap3 = 8'h01;  // 0
    assign tap4 = 8'h05;  // twos(-0.0934 * 32768) = 0xF40C
    assign tap5 = 8'h0D;  // 0
    assign tap6 = 8'h15;  // 0.3139 * 32768 = 10285.8752 = 10285 = 0x282D
    assign tap7 = 8'h1A;  // 0.5000 * 32768 = 16384 = 0x4000
	assign tap8 = 8'h1A;  // twos(-0.0265 * 32768) = 0xFC9C
    assign tap9 = 8'h15;  // 0
    assign tap10 = 8'h0D;  // 0.0441 * 32768 = 1445.0688 = 1445 = 0x05A5
    assign tap11 = 8'h05;  // 0
    assign tap12 = 8'h01;  // twos(-0.0934 * 32768) = 0xF40C
    assign tap13 = 8'hFF;  // 0
    assign tap14 = 8'hFF;  // 0.3139 * 32768 = 10285.8752 = 10285 = 0x282D
    assign tap15 = 8'h00;  // 0.5000 * 32768 = 16384 = 0x4000

    
    /* This loop sets the tvalid flag on the output of the FIR high once 
     * the circular buffer has been filled with input samples for the 
     * first time after a reset condition. */
    always @ (posedge clk or negedge reset)
        begin
            if (reset == 1'b0) //if (reset == 1'b0 || tvalid_in == 1'b0)
                begin
                    buff_cnt <= 4'd0;
                    enable_fir <= 1'b0;
                    in_sample <= 24'd0;
                end
            else if (buff_cnt == 4'd15)
                begin
                    buff_cnt <= 4'd0;
                    enable_fir <= 1'b1;
                    in_sample <= fir_input;
                end
            else
                begin
                    buff_cnt <= buff_cnt + 1;
                    in_sample <= fir_input;
                end
        end   

    always @ (posedge clk or negedge reset)
        begin
            if(reset == 1'b0)
                begin
                    enable_buff <= 1'b0;
                end
				else if  (fir_ready == 1'b0)
				begin
                    enable_buff <= 1'b0;
                end
            else
                begin
                    enable_buff <= 1'b1;
                end
        end
    /* Circular buffer bring in a serial input sample stream that 
     * creates an array of 8 input samples for the 8 taps of the filter.
	LẤY MẪU RỒI ĐẨY VỀ CÁC BẬC CÒN KHÔNG CÓ MẪU THÌ VẪN GIỮ NGUYÊN */	
    always @ (posedge clk)
        begin
            if(enable_buff == 1'b1)
                begin
                    buff0 <= in_sample;
                    buff1 <= buff0;        
                    buff2 <= buff1;         
                    buff3 <= buff2;      
                    buff4 <= buff3;      
                    buff5 <= buff4;       
                    buff6 <= buff5;    
                    buff7 <= buff6;
                    buff8 <= buff7;
                    buff9 <= buff8;
                    buff10 <= buff9;
                    buff11 <= buff10;
                    buff12 <= buff11;
                    buff13 <= buff12;
                    buff14 <= buff13;
                    buff15 <= buff14;       
                    
                end
            else
                begin
                    buff0 <= buff0;
                    buff1 <= buff1;        
                    buff2 <= buff2;         
                    buff3 <= buff3;      
                    buff4 <= buff4;      
                    buff5 <= buff5;       
                    buff6 <= buff6;    
                    buff7 <= buff7;
                    buff8 <= buff8;
                    buff9 <= buff9;
                    buff10 <= buff10;
                    buff11 <= buff11;
                    buff12 <= buff12;
                    buff13 <= buff13;
                    buff14 <= buff14;
                    buff15 <= buff15;       
                 end
        end
        
    /* Multiply stage of FIR */
    always @ (posedge clk)
        begin
            if (enable_fir == 1'b1)
                begin
                    acc0 <= tap0 * buff0;
                    acc1 <= tap1 * buff1;
                    acc2 <= tap2 * buff2;
                    acc3 <= tap3 * buff3;
                    acc4 <= tap4 * buff4;
                    acc5 <= tap5 * buff5;
                    acc6 <= tap6 * buff6;
                    acc7 <= tap7 * buff7;
                    acc8 <= tap8 * buff8;
                    acc9 <= tap9 * buff9;
                    acc10 <= tap10 * buff10;
                    acc11 <= tap11 * buff11;
                    acc12 <= tap12 * buff12;
                    acc13 <= tap13 * buff13;
                    acc14 <= tap14 * buff14;
                    acc15 <= tap15 * buff15;
                end
        end    
        
     /* Accumulate stage of FIR */   
    always @ (posedge clk) 
        begin
            if (enable_fir == 1'b1)
                begin
                    fir_output <= acc0 + acc1 + acc2 + acc3 + acc4 + acc5 + acc6 + acc7 + acc8 + acc9 + acc10 + acc11 + acc12 + acc13 + acc14 + acc15;
                end
        end     

    
    
endmodule
